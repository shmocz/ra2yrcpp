syntax = "proto3";

package yrclient.ra2yr;

enum SpeedType {
  SPEED_TYPE_FOOT = 0;
  SPEED_TYPE_TRACK = 1;
  SPEED_TYPE_Wheel = 2;
  SPEED_TYPE_Hover = 3;
  SPEED_TYPE_Winged = 4;
  SPEED_TYPE_Float = 5;
  SPEED_TYPE_Amphibious = 6;
  SPEED_TYPE_FloatBeach = 7;
  SPEED_TYPE_None = -1;
}

enum Armor {
  ARMOR_None = 0;
  ARMOR_Flak = 1;
  ARMOR_Plate = 2;
  ARMOR_Light = 3;
  ARMOR_Medium = 4;
  ARMOR_Heavy = 5;
  ARMOR_Wood = 6;
  ARMOR_Steel = 7;
  ARMOR_Concrete = 8;
  ARMOR_Special_1 = 9;
  ARMOR_Special_2 = 10;
}

enum BuildingState {
  BUILDING_STATE_NONE = 0;
  BUILDING_STATE_CONSTRUCTION = 1;
  BUILDING_STATE_IDLE = 2;
  BUILDING_STATE_ACTIVE = 3;
  BUILDING_STATE_FULL = 4;
}

enum AbstractType {
  ABSTRACT_TYPE_NONE = 0;
  ABSTRACT_TYPE_BUILDING = 1;
  ABSTRACT_TYPE_INFANTRY = 2;
  ABSTRACT_TYPE_UNIT = 3;
  ABSTRACT_TYPE_AIRCRAFT = 4;
  ABSTRACT_TYPE_VEHICLE = 5;
}

message SHPPixelData {
  uint32 width = 1;
  uint32 height = 2;
  repeated bytes frames = 3;
}

message TypeClass {
  string name = 1;
  uint32 points = 2;
  uint32 speed = 3;
  string speed_name = 4;
  uint32 build_time_multiplier = 5;
  SHPPixelData cameo = 6;
}

message PlayerInfo {}

message BuildState {
  string name = 1;
  uint32 percent_done = 2;
}

message Factory {
  int32 progress_timer = 1;
  uint32 owner = 2;
  uint32 object_id = 3;
}

message House {
  int32 array_index = 1;
  string name = 2;
  string faction = 3;
  bool defeated = 4;
  bool current_player = 5;
  int32 start_credits = 6;
  int32 money = 7;
  uint32 self = 8;
  repeated BuildState build_state = 9;
  bool is_game_over = 10;
  bool is_winner = 11;
  bool is_loser = 12;
  int32 power_output = 13;
  int32 power_drain = 14;
}

message Controls {
  bool repair_mode = 1;
  bool sell_mode = 2;
  bool place_beacon_mode = 3;
  int32 current_sw_index = 4;
}

message Coordinates {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

message Unit {
  string name = 1;
  int32 health = 2;
  Coordinates coordinates = 3;
  int32 cost = 4;
  int32 soylent = 5;
  uint32 owner_id = 6;
  Armor armor = 7;
  SpeedType speed_type = 8;
  int32 speed = 9;
  int32 points = 10;
  double speed_percentage = 11;
  double speed_multiplier = 12;
  uint32 id = 13;  // essentially a pointer
  string unit_type = 14;
  BuildingState building_state = 15;
  BuildingState queue_building_state = 16;
}

message ObjectTypeClass {
  string name = 1;
  int32 cost = 2;
  int32 soylent = 3;
  Armor armor_type = 4;
  uint32 array_index = 5;
  uint32 pointer_self = 6;
  uint32 pointer_shp_struct = 7;
}

message Object {
  uint32 pointer_technotypeclass = 1;
  int32 health = 2;
  Coordinates coordinates = 3;
  uint32 pointer_house = 4;
  double armor_multiplier = 5;
  double speed_percentage = 6;
  double speed_multiplier = 7;
  uint32 array_index = 8;
  AbstractType object_type = 9;  // TODO: get from ObjectTypeClass
  uint32 pointer_self = 10;
  uint32 pointer_initial_owner = 11;
  int32 owner_country_index = 12;  // only for buildings
}

enum LoadStage {
  // Initial empty stage
  STAGE_NONE = 0;
  // Game is being loaded
  STAGE_LOADING = 1;
  // Game is loaded and main game loop has been entered
  STAGE_INGAME = 2;
  // Game has exited main game loop
  STAGE_EXIT_GAME = 3;
}

message GameState {
  uint32 current_frame = 1;
  repeated Unit units = 2;
  repeated Factory factories = 3;
  repeated House houses = 4;
  repeated ObjectTypeClass object_types = 5;
  repeated Object objects = 6;
  LoadStage stage = 7;
}

enum NetworkEvent {
  NETWORK_EVENT_Empty = 0x0;
  NETWORK_EVENT_PowerOn = 0x1;
  NETWORK_EVENT_PowerOff = 0x2;
  NETWORK_EVENT_Ally = 0x3;
  NETWORK_EVENT_MegaMission = 0x4;
  NETWORK_EVENT_MegaMissionF = 0x5;
  NETWORK_EVENT_Idle = 0x6;
  NETWORK_EVENT_Scatter = 0x7;
  NETWORK_EVENT_Destruct = 0x8;
  NETWORK_EVENT_Deploy = 0x9;
  NETWORK_EVENT_Detonate = 0xA;
  NETWORK_EVENT_Place = 0xB;
  NETWORK_EVENT_Options = 0xC;
  NETWORK_EVENT_GameSpeed = 0xD;
  NETWORK_EVENT_Produce = 0xE;
  NETWORK_EVENT_Suspend = 0xF;
  NETWORK_EVENT_Abandon = 0x10;
  NETWORK_EVENT_Primary = 0x11;
  NETWORK_EVENT_SpecialPlace = 0x12;
  NETWORK_EVENT_Exit = 0x13;
  NETWORK_EVENT_Animation = 0x14;
  NETWORK_EVENT_Repair = 0x15;
  NETWORK_EVENT_Sell = 0x16;
  NETWORK_EVENT_SellCell = 0x17;
  NETWORK_EVENT_Special = 0x18;
  NETWORK_EVENT_FrameSync = 0x19;
  NETWORK_EVENT_Message = 0x1A;
  NETWORK_EVENT_ResponseTime = 0x1B;
  NETWORK_EVENT_FrameInfo = 0x1C;
  NETWORK_EVENT_SaveGame = 0x1D;
  NETWORK_EVENT_Archive = 0x1E;
  NETWORK_EVENT_AddPlayer = 0x1F;
  NETWORK_EVENT_Timing = 0x20;
  NETWORK_EVENT_ProcessTime = 0x21;
  NETWORK_EVENT_PageUser = 0x22;
  NETWORK_EVENT_RemovePlayer = 0x23;
  NETWORK_EVENT_LatencyFudge = 0x24;
  NETWORK_EVENT_MegaFrameInfo = 0x25;
  NETWORK_EVENT_PacketTiming = 0x26;
  NETWORK_EVENT_AboutToExit = 0x27;
  NETWORK_EVENT_FallbackHost = 0x28;
  NETWORK_EVENT_AddressChange = 0x29;
  NETWORK_EVENT_PlanConnect = 0x2A;
  NETWORK_EVENT_PlanCommit = 0x2B;
  NETWORK_EVENT_PlanNodeDelete = 0x2C;
  NETWORK_EVENT_AllCheer = 0x2D;
  NETWORK_EVENT_AbandonAll = 0x2E;
}

message TunnelPacket {
  uint32 source = 1;
  uint32 destination = 2;
  bytes data = 3;
}