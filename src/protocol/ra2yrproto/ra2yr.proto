syntax = "proto3";

package ra2yrproto.ra2yr;

enum BuildCategory {
  BUILD_CATEGORY_DontCare = 0;
  BUILD_CATEGORY_Tech = 1;
  BUILD_CATEGORY_Resoure = 2;
  BUILD_CATEGORY_Power = 3;
  BUILD_CATEGORY_Infrastructure = 4;
  BUILD_CATEGORY_Combat = 5;
}

enum SpeedType {
  SPEED_TYPE_FOOT = 0;
  SPEED_TYPE_TRACK = 1;
  SPEED_TYPE_Wheel = 2;
  SPEED_TYPE_Hover = 3;
  SPEED_TYPE_Winged = 4;
  SPEED_TYPE_Float = 5;
  SPEED_TYPE_Amphibious = 6;
  SPEED_TYPE_FloatBeach = 7;
  SPEED_TYPE_None = -1;
}

enum Armor {
  ARMOR_None = 0;
  ARMOR_Flak = 1;
  ARMOR_Plate = 2;
  ARMOR_Light = 3;
  ARMOR_Medium = 4;
  ARMOR_Heavy = 5;
  ARMOR_Wood = 6;
  ARMOR_Steel = 7;
  ARMOR_Concrete = 8;
  ARMOR_Special_1 = 9;
  ARMOR_Special_2 = 10;
}

enum BuildingState {
  BUILDING_STATE_NONE = 0;
  BUILDING_STATE_CONSTRUCTION = 1;
  BUILDING_STATE_IDLE = 2;
  BUILDING_STATE_ACTIVE = 3;
  BUILDING_STATE_FULL = 4;
}

enum AbstractType {
  ABSTRACT_TYPE_NONE = 0;
  ABSTRACT_TYPE_UNIT = 1;
  ABSTRACT_TYPE_AIRCRAFT = 2;
  ABSTRACT_TYPE_AIRCRAFTTYPE = 3;
  ABSTRACT_TYPE_ANIM = 4;
  ABSTRACT_TYPE_ANIMTYPE = 5;
  ABSTRACT_TYPE_BUILDING = 6;
  ABSTRACT_TYPE_BUILDINGTYPE = 7;
  ABSTRACT_TYPE_BULLET = 8;
  ABSTRACT_TYPE_BULLETTYPE = 9;
  ABSTRACT_TYPE_CAMPAIGN = 10;
  ABSTRACT_TYPE_CELL = 11;
  ABSTRACT_TYPE_FACTORY = 12;
  ABSTRACT_TYPE_HOUSE = 13;
  ABSTRACT_TYPE_HOUSETYPE = 14;
  ABSTRACT_TYPE_INFANTRY = 15;
  ABSTRACT_TYPE_INFANTRYTYPE = 16;
  ABSTRACT_TYPE_ISOTILE = 17;
  ABSTRACT_TYPE_ISOTILETYPE = 18;
  ABSTRACT_TYPE_BUILDINGLIGHT = 19;
  ABSTRACT_TYPE_OVERLAY = 20;
  ABSTRACT_TYPE_OVERLAYTYPE = 21;
  ABSTRACT_TYPE_PARTICLE = 22;
  ABSTRACT_TYPE_PARTICLETYPE = 23;
  ABSTRACT_TYPE_PARTICLESYSTEM = 24;
  ABSTRACT_TYPE_PARTICLESYSTEMTYPE = 25;
  ABSTRACT_TYPE_SCRIPT = 26;
  ABSTRACT_TYPE_SCRIPTTYPE = 27;
  ABSTRACT_TYPE_SIDE = 28;
  ABSTRACT_TYPE_SMUDGE = 29;
  ABSTRACT_TYPE_SMUDGETYPE = 30;
  ABSTRACT_TYPE_SPECIAL = 31;
  ABSTRACT_TYPE_SUPERWEAPONTYPE = 32;
  ABSTRACT_TYPE_TASKFORCE = 33;
  ABSTRACT_TYPE_TEAM = 34;
  ABSTRACT_TYPE_TEAMTYPE = 35;
  ABSTRACT_TYPE_TERRAIN = 36;
  ABSTRACT_TYPE_TERRAINTYPE = 37;
  ABSTRACT_TYPE_TRIGGER = 38;
  ABSTRACT_TYPE_TRIGGERTYPE = 39;
  ABSTRACT_TYPE_UNITTYPE = 40;
  ABSTRACT_TYPE_VOXELANIM = 41;
  ABSTRACT_TYPE_VOXELANIMTYPE = 42;
  ABSTRACT_TYPE_WAVE = 43;
  ABSTRACT_TYPE_TAG = 44;
  ABSTRACT_TYPE_TAGTYPE = 45;
  ABSTRACT_TYPE_TIBERIUM = 46;
  ABSTRACT_TYPE_ACTION = 47;
  ABSTRACT_TYPE_EVENT = 48;
  ABSTRACT_TYPE_WEAPONTYPE = 49;
  ABSTRACT_TYPE_WARHEADTYPE = 50;
  ABSTRACT_TYPE_WAYPOINT = 51;
  ABSTRACT_TYPE_ABSTRACT = 52;
  ABSTRACT_TYPE_TUBE = 53;
  ABSTRACT_TYPE_LIGHTSOURCE = 54;
  ABSTRACT_TYPE_EMPULSE = 55;
  ABSTRACT_TYPE_TACTICALMAP = 56;
  ABSTRACT_TYPE_SUPER = 57;
  ABSTRACT_TYPE_AITRIGGER = 58;
  ABSTRACT_TYPE_AITRIGGERTYPE = 59;
  ABSTRACT_TYPE_NEURON = 60;
  ABSTRACT_TYPE_FOGGEDOBJECT = 61;
  ABSTRACT_TYPE_ALPHASHAPE = 62;
  ABSTRACT_TYPE_VEINHOLEMONSTER = 63;
  ABSTRACT_TYPE_NAVYTYPE = 64;
  ABSTRACT_TYPE_SPAWNMANAGER = 65;
  ABSTRACT_TYPE_CAPTUREMANAGER = 66;
  ABSTRACT_TYPE_PARASITE = 67;
  ABSTRACT_TYPE_BOMB = 68;
  ABSTRACT_TYPE_RADSITE = 69;
  ABSTRACT_TYPE_TEMPORAL = 70;
  ABSTRACT_TYPE_AIRSTRIKE = 71;
  ABSTRACT_TYPE_SLAVEMANAGER = 72;
  ABSTRACT_TYPE_DISKLASER = 73;
}

// TODO: put enums to separate file
enum LandType {
  LAND_TYPE_Clear = 0;
  LAND_TYPE_Road = 1;
  LAND_TYPE_Water = 2;
  LAND_TYPE_Rock = 3;
  LAND_TYPE_Wall = 4;
  LAND_TYPE_Tiberium = 5;
  LAND_TYPE_Beach = 6;
  LAND_TYPE_Rough = 7;
  LAND_TYPE_Ice = 8;
  LAND_TYPE_Railroad = 9;
  LAND_TYPE_Tunnel = 10;
  LAND_TYPE_Weeds = 11;
}

message SHPPixelData {
  uint32 width = 1;
  uint32 height = 2;
  repeated bytes frames = 3;
  uint32 pointer_self = 4;
}

message TypeClass {
  string name = 1;
  uint32 points = 2;
  uint32 speed = 3;
  string speed_name = 4;
  uint32 build_time_multiplier = 5;
  SHPPixelData cameo = 6;
}

message PlayerInfo {}

message BuildState {
  string name = 1;
  uint32 percent_done = 2;
}

message Factory {
  int32 progress_timer = 1;
  uint32 owner = 2;
  uint32 object = 3;
  repeated uint32 queued_objects = 4;
  bool on_hold = 5;
}

message House {
  int32 array_index = 1;
  string name = 2;
  string faction = 3;
  bool defeated = 4;
  bool current_player = 5;
  int32 start_credits = 6;
  int32 money = 7;
  uint32 self = 8;
  repeated BuildState build_state = 9;
  bool is_game_over = 10;
  bool is_winner = 11;
  bool is_loser = 12;
  int32 power_output = 13;
  int32 power_drain = 14;
  int32 type_array_index = 15;
  bool allied_infiltrated = 16;
  bool soviet_infiltrated = 17;
  bool third_infiltrated = 18;
}

message Controls {
  bool repair_mode = 1;
  bool sell_mode = 2;
  bool place_beacon_mode = 3;
  int32 current_sw_index = 4;
}

message Coordinates {
  int32 x = 1;
  int32 y = 2;
  int32 z = 3;
}

message Rectangle {
  int32 x = 1;
  int32 y = 2;
};

message ObjectTypeClass {
  string name = 1;
  int32 cost = 2;
  int32 soylent = 3;
  Armor armor_type = 4;
  uint32 array_index = 5;
  uint32 pointer_self = 6;
  uint32 pointer_shp_struct = 7;
  repeated int32 prerequisites = 8;
  AbstractType type = 9;
  int32 power_drain = 10;
  int32 required_houses = 11;
  int32 forbidden_houses = 12;
  uint32 owner_flags = 13;
  int32 tech_level = 14;
  bool is_base_defense = 15;
  bool wall = 16;
  int32 power_bonus = 17;
  BuildCategory build_category = 18;
  int32 build_limit = 19;
  bool naval = 20;
  bool requires_stolen_allied_tech = 21;
  bool requires_stolen_soviet_tech = 22;
  bool requires_stolen_third_tech = 23;
  uint32 pointer_cameo = 24;
}

message Object {
  uint32 pointer_technotypeclass = 1;
  int32 health = 2;
  Coordinates coordinates = 3;
  uint32 pointer_house = 4;
  double armor_multiplier = 5;
  double speed_percentage = 6;
  double speed_multiplier = 7;
  uint32 array_index = 8;
  AbstractType object_type = 9;  // TODO: get from ObjectTypeClass
  uint32 pointer_self = 10;
  uint32 pointer_initial_owner = 11;
  int32 owner_country_index = 12;  // only for buildings
  bool selected = 13;
  bool deployed = 14;
  bool deploying = 15;
  bool undeploying = 16;
  Coordinates destination = 17;
  Mission current_mission = 18;
  bool in_limbo = 19;
}

enum LoadStage {
  // Initial empty stage
  STAGE_NONE = 0;
  // Game is being loaded
  STAGE_LOADING = 1;
  // Game is loaded and main game loop has been entered
  STAGE_INGAME = 2;
  // Game has exited main game loop
  STAGE_EXIT_GAME = 3;
}

message Cell {
  LandType land_type = 1;
  double radiation_level = 2;
  int32 height = 3;
  int32 level = 4;
  // crate type and some weird data
  int32 overlay_data = 5;
  int32 tiberium_value = 6;
  double tiberium_multiplier = 7;
  // Objects in this Cell
  repeated Object objects = 8;
  bool shrouded = 9;
  uint32 passability = 10;
  int32 visibility = 11;
  int32 shroud_state = 12;
  int32 index = 13;
};

message MapData {
  // map bounds
  uint32 width = 1;
  uint32 height = 2;
  repeated Cell cells = 3;

  // These are the actual offset to the static cell array
  uint32 offset_x = 4;
  uint32 offset_y = 5;
};

// More efficient "structure of arrays" format for map data
message MapDataSoA {
  repeated LandType land_type = 1;
  repeated double radiation_level = 2;
  repeated int32 height = 3;
  repeated int32 level = 4;
  repeated int32 overlay_data = 5;
  repeated int32 tiberium_value = 6;
  repeated bool shrouded = 7;
  repeated uint32 passability = 8;
  uint32 map_width = 9;
  uint32 map_height = 10;
};

message PrerequisiteGroups {
  repeated int32 proc = 1;
  repeated int32 tech = 2;
  repeated int32 radar = 3;
  repeated int32 barracks = 4;
  repeated int32 factory = 5;
  repeated int32 power = 6;
};

enum NetworkEvent {
  NETWORK_EVENT_Empty = 0x0;
  NETWORK_EVENT_PowerOn = 0x1;
  NETWORK_EVENT_PowerOff = 0x2;
  NETWORK_EVENT_Ally = 0x3;
  NETWORK_EVENT_MegaMission = 0x4;
  NETWORK_EVENT_MegaMissionF = 0x5;
  NETWORK_EVENT_Idle = 0x6;
  NETWORK_EVENT_Scatter = 0x7;
  NETWORK_EVENT_Destruct = 0x8;
  NETWORK_EVENT_Deploy = 0x9;
  NETWORK_EVENT_Detonate = 0xA;
  NETWORK_EVENT_Place = 0xB;
  NETWORK_EVENT_Options = 0xC;
  NETWORK_EVENT_GameSpeed = 0xD;
  NETWORK_EVENT_Produce = 0xE;
  NETWORK_EVENT_Suspend = 0xF;
  NETWORK_EVENT_Abandon = 0x10;
  NETWORK_EVENT_Primary = 0x11;
  NETWORK_EVENT_SpecialPlace = 0x12;
  NETWORK_EVENT_Exit = 0x13;
  NETWORK_EVENT_Animation = 0x14;
  NETWORK_EVENT_Repair = 0x15;
  NETWORK_EVENT_Sell = 0x16;
  NETWORK_EVENT_SellCell = 0x17;
  NETWORK_EVENT_Special = 0x18;
  NETWORK_EVENT_FrameSync = 0x19;
  NETWORK_EVENT_Message = 0x1A;
  NETWORK_EVENT_ResponseTime = 0x1B;
  NETWORK_EVENT_FrameInfo = 0x1C;
  NETWORK_EVENT_SaveGame = 0x1D;
  NETWORK_EVENT_Archive = 0x1E;
  NETWORK_EVENT_AddPlayer = 0x1F;
  NETWORK_EVENT_Timing = 0x20;
  NETWORK_EVENT_ProcessTime = 0x21;
  NETWORK_EVENT_PageUser = 0x22;
  NETWORK_EVENT_RemovePlayer = 0x23;
  NETWORK_EVENT_LatencyFudge = 0x24;
  NETWORK_EVENT_MegaFrameInfo = 0x25;
  NETWORK_EVENT_PacketTiming = 0x26;
  NETWORK_EVENT_AboutToExit = 0x27;
  NETWORK_EVENT_FallbackHost = 0x28;
  NETWORK_EVENT_AddressChange = 0x29;
  NETWORK_EVENT_PlanConnect = 0x2A;
  NETWORK_EVENT_PlanCommit = 0x2B;
  NETWORK_EVENT_PlanNodeDelete = 0x2C;
  NETWORK_EVENT_AllCheer = 0x2D;
  NETWORK_EVENT_AbandonAll = 0x2E;
  NETWORK_EVENT_LastEvent = 0x2F;
}

enum Mission {
  Mission_Sleep = 0;
  Mission_None = -1;
  Mission_Attack = 1;
  Mission_Move = 2;
  Mission_QMove = 3;
  Mission_Retreat = 4;
  Mission_Guard = 5;
  Mission_Sticky = 6;
  Mission_Enter = 7;
  Mission_Capture = 8;
  Mission_Eaten = 9;
  Mission_Harvest = 10;
  Mission_Area_Guard = 11;
  Mission_Return = 12;
  Mission_Stop = 13;
  Mission_Ambush = 14;
  Mission_Hunt = 15;
  Mission_Unload = 16;
  Mission_Sabotage = 17;
  Mission_Construction = 18;
  Mission_Selling = 19;
  Mission_Repair = 20;
  Mission_Rescue = 21;
  Mission_Missile = 22;
  Mission_Harmless = 23;
  Mission_Open = 24;
  Mission_Patrol = 25;
  Mission_ParadropApproach = 26;
  Mission_ParadropOverfly = 27;
  Mission_Wait = 28;
  Mission_AttackMove = 29;
  Mission_SpyplaneApproach = 30;
  Mission_SpyplaneOverfly = 31;
}

enum ColorScheme {
  ColorScheme_None = 0;
  ColorScheme_Yellow = 3;
  ColorScheme_White = 5;
  ColorScheme_Grey = 7;
  ColorScheme_Red = 11;
  ColorScheme_Orange = 13;
  ColorScheme_Pink = 15;
  ColorScheme_Purple = 17;
  ColorScheme_Blue = 21;
  ColorScheme_Green = 29;
}

message TunnelPacket {
  uint32 source = 1;
  uint32 destination = 2;
  bytes data = 3;
}

message TargetClass {
  int32 m_id = 1;
  int32 m_rtti = 2;
}

message Event {
  message Animation {
    uint32 id = 1;
    uint32 house_id = 2;
  }

  message FrameInfo {
    uint32 crc = 1;
    uint32 command_count = 2;
    uint32 delay = 3;
  }

  message Target {
    TargetClass whom = 1;
  }

  message MegaMission {
    TargetClass whom = 1;
    int32 mission = 2;
    TargetClass target = 3;
    TargetClass destination = 4;
    TargetClass follow = 5;
    bool is_planning_event = 6;
  }

  message MegaMission_F {
    TargetClass whom = 1;
    int32 mission = 2;
    TargetClass target = 3;
    TargetClass destination = 4;
    int32 speed = 5;
    int32 max_speed = 6;
  }

  message Production {
    int32 rtti_id = 1;
    int32 heap_id = 2;
    int32 is_naval = 3;
  }

  message Unknown_LongLong {
    int32 unk_0 = 1;
    int64 data = 2;
    int32 unk_c = 3;
  }

  message Unknown_Tuple {
    int32 unk_0 = 1;
    int32 unk_4 = 2;
    int32 data = 3;
    int32 unk_c = 4;
  }

  message Place {
    AbstractType rtti_type = 1;
    int32 heap_id = 2;
    bool is_naval = 3;
    Coordinates location = 4;
  }

  message SpecialPlace {
    int32 id = 1;
    Coordinates location = 2;
  }

  message Specific {
    AbstractType rtti_type = 1;
    int32 id = 2;
  }

  bool is_executed = 1;
  int32 house_index = 2;
  uint32 frame = 3;
  NetworkEvent event_type = 4;
  oneof data {
    Animation animation = 5;
    FrameInfo frame_info = 6;
    Target target = 7;
    MegaMission mega_mission = 8;
    MegaMission_F mega_mission_F = 9;
    Production production = 10;
    Unknown_LongLong unknown_long_long = 11;
    Unknown_Tuple unknown_tuple = 12;
    Place place = 13;
    SpecialPlace special_place = 14;
    Specific specific = 15;
  }
  uint32 timing = 16;
}

message EventLists {
  repeated Event out_list = 1;
  repeated Event do_list = 2;
  repeated Event megamission_list = 3;
}

message EventListsSnapshot {
  repeated EventLists lists = 1;
  repeated uint64 frame = 2;
}

message ObjectTypes {
  repeated ObjectTypeClass object_types = 1;
}

message GameState {
  uint32 current_frame = 1;
  repeated Factory factories = 3;
  repeated House houses = 4;
  repeated ObjectTypeClass object_types = 5;
  repeated Object objects = 6;
  LoadStage stage = 7;
  repeated double load_progresses = 8;
  MapData map_data = 9;
  PrerequisiteGroups prerequisite_groups = 10;
  repeated Event out_list = 11;
  repeated Event do_list = 12;
  repeated Event megamission_list = 13;
  int32 tech_level = 14;
  repeated Cell cells_difference = 15;
}
