# FIXME: make this general purpose and usable both within Docker and natively
set(CMAKE_SYSTEM_NAME Windows)
set(HOST_ARCH i686)
set(TOOLCHAIN_PREFIX i686-w64-mingw32)
set(USER_ENVS $ENV{HOME}/prog/envs)
set(ROOT_WINDOWS ${USER_ENVS}/w32/sysroot/usr)
set(ROOT_LINUX ${USER_ENVS}/linux_x86_64/usr)
set(CMAKE_SYSROOT /usr/${TOOLCHAIN_PREFIX})
set(TC_VERSION "12.2.0")
set(INCLUDE_CXX, /usr/${TOOLCHAIN_PREFIX}/include/c++/${TC_VERSION})
set(CMAKE_C_COMPILER ${TOOLCHAIN_PREFIX}-gcc CACHE FILEPATH "")
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_PREFIX}-g++ CACHE FILEPATH "")
set(CMAKE_CXX_STANDARD 17 CACHE STRING "")
set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES /usr/lib/gcc/${TOOLCHAIN_PREFIX}/${TC_VERSION}/include)

set(OPT_DIR "$ENV{PWD}/opt")

# Need these to find headers etc.
# TODO: copy the native protoc executable to pkg
set(CMAKE_FIND_ROOT_PATH "${WINSDK_LIB};$ENV{PWD}/build-protobuf/mingw-w64-i686-Release/pkg")

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ALWAYS)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Enable these to strip symbols
# set(CMAKE_SHARED_LINKER_FLAGS -s)
# set(CMAKE_EXE_LINKER_FLAGS -s)

set(RA2YRCPP_BUILD_MAIN_DLL ON CACHE BOOL "")
set(RA2YRCPP_BUILD_PROTOBUF OFF CACHE BOOL "")
set(RA2YRCPP_PROTOC_WINDOWS OFF CACHE BOOL "")
set(RA2YRCPP_BUILD_TESTS ON CACHE BOOL "")